target('all', 'build/app.lib')

include('./compile.lk')
include('./assemble.lk')

local source_patterns = { '%.c$', '%.s$' }
local source_directories = { 'src', 'lib' }

local sources = flat_map(source_directories, function(directory)
  return files_from_directory(directory, { recursive = true, match = source_patterns })
end)

sources = map(sources, set_extension('o'))
sources = map(sources, add_prefix('build/'))

map(map(sources, set_extension('d')), load_dependency_file)

rule('build', {}, function(args)
  print('Creating build directory...')
  fs.mkdirp(args.target)
  exec('sleep 0.25')
  print('Finished creating build directory')
end)

rule('build/src/a.o', { 'src/a.c', 'build' }, function(args)
  print('Compiling ' .. args.target .. '...')
  fs.mkdirp(get_path(args.target))
  exec('touch ' .. args.target)
  fs.writeFile('build/src/a.d', 'src/a.c: src/a.h src/b.h')
  exec('sleep 0.25')
  print('Finished compiling ' .. args.target)
end)

rule('build/app.lib', { 'build', table.unpack(sources) }, function(args)
  print('Linking ' .. args.target .. '...')
  fs.mkdirp(get_path(args.target))
  exec('touch ' .. args.target)
  exec('sleep 0.25')
  print('Finished linking ' .. args.target)
end)
